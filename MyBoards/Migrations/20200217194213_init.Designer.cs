// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBoards.Models;
using Oracle.EntityFrameworkCore.Metadata;

namespace MyBoards.Migrations
{
    [DbContext(typeof(MyBoardsContext))]
    [Migration("20200217194213_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity("MyBoards.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Boards");

                    b.HasData(
                        new { Id = 1, Name = "Principal" }
                    );
                });

            modelBuilder.Entity("MyBoards.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CardListId");

                    b.Property<string>("Description");

                    b.Property<int>("StateId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CardListId");

                    b.HasIndex("StateId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("MyBoards.Models.CardList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BoardId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("CardLists");

                    b.HasData(
                        new { Id = 1, BoardId = 1, Name = "Infinity Seguros" }
                    );
                });

            modelBuilder.Entity("MyBoards.Models.CardResponsible", b =>
                {
                    b.Property<int>("CardId");

                    b.Property<int>("ResponsibleId");

                    b.HasKey("CardId", "ResponsibleId");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("CardResponsible");
                });

            modelBuilder.Entity("MyBoards.Models.CardTag", b =>
                {
                    b.Property<int>("CardId");

                    b.Property<int>("TagId");

                    b.HasKey("CardId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("CardTags");
                });

            modelBuilder.Entity("MyBoards.Models.Responsible", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Responsibles");

                    b.HasData(
                        new { Id = 1, Name = "Samuel" }
                    );
                });

            modelBuilder.Entity("MyBoards.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new { Id = 1, Title = "En desarrollo" }
                    );
                });

            modelBuilder.Entity("MyBoards.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new { Id = 1, Color = "Amarillo", Name = "Issue" }
                    );
                });

            modelBuilder.Entity("MyBoards.Models.Card", b =>
                {
                    b.HasOne("MyBoards.Models.CardList", "CardList")
                        .WithMany("Cards")
                        .HasForeignKey("CardListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBoards.Models.State", "State")
                        .WithMany("Cards")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBoards.Models.CardList", b =>
                {
                    b.HasOne("MyBoards.Models.Board", "Board")
                        .WithMany("CardLists")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBoards.Models.CardResponsible", b =>
                {
                    b.HasOne("MyBoards.Models.Card", "Card")
                        .WithMany("CardResponsibles")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBoards.Models.Responsible", "Responsible")
                        .WithMany("CardResponsibles")
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyBoards.Models.CardTag", b =>
                {
                    b.HasOne("MyBoards.Models.Card", "Card")
                        .WithMany("CardTags")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyBoards.Models.Tag", "Tag")
                        .WithMany("CardTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
